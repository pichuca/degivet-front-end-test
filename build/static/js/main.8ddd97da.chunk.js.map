{"version":3,"sources":["actions/actions.js","services/fetch-posts.js","services/dismiss-all-posts.js","reducers/posts.js","components/post/post.js","components/post-details/post-details.js","services/update-single-posts.js","services/dismiss-single-post.js","components/posts-list/posts-list.js","components/loading-spinner/index.js","App.js","serviceWorker.js","utils/hotReloading.js","middleware/logger.js","reducers/index.js","index.js","configureStore.js"],"names":["FETCH_POSTS_PENDING","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","UPDATE_SINGLE_POST_READED_STATUS_PENDING","UPDATE_SINGLE_POST_READED_STATUS_SUCCESS","UPDATE_SINGLE_POST_READED_STATUS_ERROR","DISMISS_ALL_POSTS_PENDING","DISMISS_ALL_POSTS_SUCCESS","DISMISS_ALL_POSTS_ERROR","DISMISS_SINGLE_POST_SUCCESS","postsDataURL","fetchPosts","dispatch","type","axios","get","then","res","posts","data","children","catch","error","fetchPostsError","dismissAllPosts","pending","initialState","getPosts","state","postsReducers","getPostsPending","getPostsError","Post","props","hasBeenReaded","handleClickToDisplayPost","bind","dismissPost","event","this","setState","getPostClickEvent","id","Fragment","ListItem","className","onClick","alignItems","ListItemAvatar","Avatar","alt","src","thumbnail","ListItemText","author","to","pathname","subreddit_id","url","title","createdUTC","created_utc","moment","unix","fromNow","getUTCEntryDate","entryDate","num_comments","Divider","variant","React","Component","useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","fontSize","pos","marginBottom","PostDetails","classes","Card","CardContent","Typography","color","gutterBottom","component","CardActions","Button","size","e","preventDefault","window","open","focus","updateSinglePost","updateSinglePostReadedStatusSuccess","dismissSinglePost","postId","dismissSinglePostSuccess","PostsList","offset","elements","perPage","currentPage","setElementsForCurrentPage","handlePageClick","handleSinglePostDismiss","elementsLength","length","slice","pageCount","Math","ceil","selectedPage","selected","copydCollection","filter","post","paginationElement","postItems","postsElements","map","postData","key","breakLabel","previousLabel","nextLabel","onPageChange","forcePage","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","Grid","container","spacing","item","xs","sm","List","transitionName","transitionEnterTimeout","transitionLeaveTimeout","path","PostDetail","useLocation","detailsData","useParams","connect","bindActionCreators","updateSinglePostAction","dismissSinglePostAction","LoadingSpinner","App","areAllPostsDismissed","dismissAllPostsHandler","handleRefreshPage","location","replace","reload","dismissAllPostsButton","emptyPageMessage","AppBar","Toolbar","Container","maxWidth","fetchPostsAction","dismissAllPostsAction","Boolean","hostname","match","hotReloading","process","logger","store","next","action","console","group","info","result","log","getState","groupEnd","combineReducers","preloadedState","configureStore","reducer","rootReducer","middleware","loggerMiddleware","getDefaultMiddleware","enhancers","renderApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ddd97da.chunk.js","sourcesContent":["// Actions\n\n/**\n * Fetch posts.\n */\nexport const FETCH_POSTS_PENDING = 'FETCH_POSTS_PENDING';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const FETCH_POSTS_ERROR = 'FETCH_POSTS_ERROR';\n\n/**\n * Update single post.\n */\nexport const UPDATE_SINGLE_POST_READED_STATUS_PENDING = 'UPDATE_SINGLE_POST_READED_STATUS_PENDING';\nexport const UPDATE_SINGLE_POST_READED_STATUS_SUCCESS = 'UPDATE_SINGLE_POST_READED_STATUS_SUCCESS';\nexport const UPDATE_SINGLE_POST_READED_STATUS_ERROR = 'UPDATE_SINGLE_POST_READED_STATUS_ERROR';\n\n/**\n * Dismiss all posts.\n */\n export const DISMISS_ALL_POSTS_PENDING = 'DISMISS_ALL_POSTS_PENDING';\n export const DISMISS_ALL_POSTS_SUCCESS = 'DISMISS_ALL_POSTS_SUCCESS';\n export const DISMISS_ALL_POSTS_ERROR = 'DISMISS_ALL_POSTS_ERROR';\n\n /**\n  * Dismiss single post.\n  */\n export const DISMISS_SINGLE_POST_PENDING = 'DISMISS_SINGLE_POST_PENDING';\n export const DISMISS_SINGLE_POST_SUCCESS = 'DISMISS_SINGLE_POST_SUCCESS';\n export const DISMISS_SINGLE_POST_ERROR = 'DISMISS_SINGLE_POST_ERROR'; \n\nexport function fetchPostsPending() {\n    return {\n        type: FETCH_POSTS_PENDING\n    };\n}\n\nexport function fetchPostsSuccess(posts) {\n    return {\n        type: FETCH_POSTS_SUCCESS,\n        posts: posts,\n    };\n}\n\nexport function fetchPostsError(error) {\n    return {\n        type: FETCH_POSTS_ERROR,\n        error: error,\n    };\n}\n\nexport function updateSinglePostReadedStatusPending() {\n    return {\n        type: UPDATE_SINGLE_POST_READED_STATUS_PENDING\n    };\n}\n\nexport function updateSinglePostReadedStatusSuccess(posts) {\n    return {\n        type: UPDATE_SINGLE_POST_READED_STATUS_SUCCESS,\n        posts: posts,\n    };\n}\n\nexport function updateSinglePostReadedStatusError(error) {\n    return {\n        type: UPDATE_SINGLE_POST_READED_STATUS_ERROR,\n        error: error,\n    };\n}\n\nexport function dismissAllPostsPending() {\n    return {\n        type: DISMISS_ALL_POSTS_PENDING,\n        pending: true,\n    };\n}\n\nexport function dismissAllPostsSuccess() {\n    return {\n        type: DISMISS_ALL_POSTS_SUCCESS,\n        pending: false,\n    };\n}\n\nexport function dismissAllPostsError(error) {\n    return {\n        type: DISMISS_ALL_POSTS_ERROR,\n        error: error,\n    };\n}\n\nexport function dismissSinglePostPending() {\n    return {\n        type: DISMISS_SINGLE_POST_PENDING,\n        pending: true,\n    };\n}\n\nexport function dismissSinglePostSuccess(posts) {\n    return {\n        type: DISMISS_SINGLE_POST_SUCCESS,\n        posts: posts,\n        pending: false,\n    };\n}\n\nexport function dismissSinglePostError(error) {\n    return {\n        type: DISMISS_SINGLE_POST_ERROR,\n        error: error,\n    };\n}\n","import axios from 'axios';\nimport { fetchPostsPending, fetchPostsSuccess, fetchPostsError } from '../actions/actions';\n\n// TODO: add path to Reddit API.\nconst postsDataURL = '/mock-data/top.json'; // Axios needs absolute path to read the local file.\n\nexport default function fetchPosts() {\n    return dispatch => {\n        dispatch(fetchPostsPending());\n        axios.get(postsDataURL)\n            .then(res => {\n                dispatch(fetchPostsSuccess(res.data.data.children));\n                return res.data.data.children;\n            })\n            .catch((error) => {\n                dispatch(fetchPostsError(error));\n            });\n    };\n}\n","import { dismissAllPostsSuccess } from '../actions/actions';\n\nexport default function dismissAllPosts() {\n    return dispatch => {\n        dispatch(dismissAllPostsSuccess());\n    };\n}\n","import { \n    FETCH_POSTS_PENDING,\n    FETCH_POSTS_SUCCESS,\n    FETCH_POSTS_ERROR,\n    UPDATE_SINGLE_POST_READED_STATUS_PENDING,\n    UPDATE_SINGLE_POST_READED_STATUS_SUCCESS,\n    UPDATE_SINGLE_POST_READED_STATUS_ERROR,\n    DISMISS_ALL_POSTS_PENDING,\n    DISMISS_ALL_POSTS_SUCCESS,\n    DISMISS_ALL_POSTS_ERROR } from '../actions/actions';\n\nconst initialState = {\n    pending: false,\n    posts: [],\n    error: null,\n};\n\n\nexport default function postsReducers(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_POSTS_PENDING:\n            return {\n                ...state,\n                pending: true,\n            };\n        case FETCH_POSTS_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n                posts: action.posts,\n            };\n        case FETCH_POSTS_ERROR:\n            return {\n                ...state,\n                pending: false,\n                error: action.error,\n            };\n        case DISMISS_ALL_POSTS_PENDING:\n            return {\n                ...state,\n                pending: true,\n            };\n        case DISMISS_ALL_POSTS_SUCCESS:\n            return {\n                ...initialState, // pass initial state with empty items array.\n                pending: false,\n            };\n        case DISMISS_ALL_POSTS_ERROR:\n            return {\n                ...state,\n                error: action.error\n            };\n        case UPDATE_SINGLE_POST_READED_STATUS_PENDING:\n            return {\n                ...state,\n                pending: true,\n            };\n        case UPDATE_SINGLE_POST_READED_STATUS_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n            };\n        case UPDATE_SINGLE_POST_READED_STATUS_ERROR:\n            return {\n                ...state,\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n}\n\n// Selectors.\nexport const getPosts = state => state.postsReducers.posts;\nexport const getPostsPending = state => state.postsReducers.pending;\nexport const getPostsError = state => state.postsReducers.error;\n","import React from 'react';\nimport moment from 'moment';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport MarkunreadMailboxIcon from '@material-ui/icons/MarkunreadMailbox';\n\nimport './post.css';\n\nclass Post extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasBeenReaded: false,\n        };\n        // handlers.\n        this.handleClickToDisplayPost = this.handleClickToDisplayPost.bind(this);\n        this.dismissPost = this.dismissPost.bind(this);\n    }\n\n    handleClickToDisplayPost(event) {\n        this.setState({\n            hasBeenReaded: true,\n        });\n    }\n\n    dismissPost() {\n        this.props.getPostClickEvent(this.props.data.id);\n    }\n\n    render() {\n        const getUTCEntryDate = () => {\n            let createdUTC = this.props.data.created_utc;\n            return moment.unix(createdUTC).fromNow();\n        };\n        return (\n            <React.Fragment>\n                <ListItem id={this.props.data.id} className=\"post\" onClick={this.handleClickToDisplayPost} alignItems=\"flex-start\">\n                    <ListItemAvatar>\n                        <Avatar alt=\"user thumbnail\" src={this.props.data.thumbnail} />\n                    </ListItemAvatar>\n                    <ListItemText>\n                        <h3>{this.props.data.author}</h3>\n                        <h2>\n                            <Link to={{ \n                                pathname: '/' + this.props.data.id,\n                                state: { \n                                    thumbnail: this.props.data.thumbnail, \n                                    author: this.props.data.author,\n                                    subreddit_id: this.props.data.subreddit_id,\n                                    url: this.props.data.url ,\n                                    title: this.props.data.title,\n                                }\n                            }}>\n                                {this.props.data.title}\n                            </Link>\n                        </h2>\n                        <div className=\"post__entry-date\">\n                            <span><b>Entry date: </b></span>\n                            <span>{getUTCEntryDate(this.props.entryDate)}</span>\n                        </div>\n                        <div className=\"post__comments-amount\">\n                            <span><b>Number of comments:</b> </span>\n                            <span>{this.props.data.num_comments}</span>\n                        </div>\n                        <div className=\"post__readed-status\">\n                            {/* TODO: add icon for UX enhancement */}\n                            {this.state.hasBeenReaded ? <CheckCircleOutlinedIcon /> : <MarkunreadMailboxIcon /> }\n                        </div>\n                    </ListItemText>\n                    <div className=\"dismiss-button\" title=\"dismiss post\">\n                        <CancelOutlinedIcon onClick={this.dismissPost} />\n                    </div>\n                </ListItem>\n                <Divider variant=\"middle\" />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Post;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function PostDetails(props) {\n  const classes = useStyles();\n\n  function handleClick(e) {\n      e.preventDefault();\n      window.open(props.url, '_blank');\n      window.focus();\n  }\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            Author:\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n            {props.author}\n        </Typography>\n        <br />\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            Subreddit ID:\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n            {props.subreddit_id}\n        </Typography>\n        <br />\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            {props.thumbnail !== '' ? 'Thumbnail image' : 'No thumbnail image for this user.'}\n        </Typography>\n        { props.thumbnail !== '' ? <img src={props.thumbnail}  alt=\"user thumbnail\" /> : null }\n        <br />\n        <br />\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            Title:\n        </Typography>\n        <Typography>\n            {props.title}\n        </Typography>\n        <br />\n        <br />\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            Post ID:\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n            {props.id}\n        </Typography>\n        \n      </CardContent>\n      <CardActions>\n        <Button size=\"small\" onClick={handleClick}>Go to post</Button>\n      </CardActions>\n    </Card>\n  );\n}","import { updateSinglePostReadedStatusSuccess } from '../actions/actions';\n\n/**\n * @updateSinglePost\n * @param {number} postId\n * Updates posts readed status by id \n */\nexport default function updateSinglePost(posts) {\n    return dispatch => {\n        dispatch(updateSinglePostReadedStatusSuccess(posts));\n    };\n}\n","import { dismissSinglePostSuccess } from '../actions/actions';\n\nexport default function dismissSinglePost(postId, posts) {\n    // TODO: changed item readed status by id\n    // and re arrange post with new one.\n    return dispatch => {\n        dispatch(dismissSinglePostSuccess(postId, posts));\n    };\n}\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    useParams,\n    useLocation\n} from \"react-router-dom\";\n\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ReactPaginate from 'react-paginate';\nimport Post from '../post/post';\nimport PostDeatils from '../post-details/post-details';\n\nimport './post-list.css';\n\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\n\nimport updateSinglePostAction from '../../services/update-single-posts';\nimport dismissSinglePostAction from '../../services/dismiss-single-post';\n\nimport { getPosts, getPostsPending, getPostsError } from '../../reducers/posts';\n\nclass PostsList extends React.Component  {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offset: 0,\n            data: props.posts,\n            elements: props.posts,\n            perPage: 5,\n            currentPage: 0,\n        };\n        this.setElementsForCurrentPage = this.setElementsForCurrentPage.bind(this);\n        this.handlePageClick = this.handlePageClick.bind(this);\n        this.handleSinglePostDismiss = this.handleSinglePostDismiss.bind(this);\n    }\n    componentDidMount() {\n        this.setElementsForCurrentPage();\n    }\n    setElementsForCurrentPage() {\n        const elementsLength = this.state.data.length;\n        const perPage = this.state.perPage;\n        const elements = this.state.data.slice(this.state.offset, this.state.offset + this.state.perPage);\n        this.setState({\n            pageCount: Math.ceil(elementsLength / perPage),\n            elements: elements,\n        });\n    }\n    handlePageClick(data) {\n        const selectedPage = data.selected;\n        const offset = selectedPage * this.state.perPage;\n        this.setState({\n            currentPage: selectedPage,\n            offset: offset,\n        }, () => this.setElementsForCurrentPage());\n    }\n    handleSinglePostDismiss(postId) {\n        const copydCollection = [...this.state.data].filter((post) => {\n            return post.data.id !== postId;\n        });\n        \n        this.setState({\n            elements: copydCollection,\n            data: copydCollection,\n        }, () => this.setElementsForCurrentPage());\n    }\n    render() {\n        const postItems = this.state.elements;\n        const postsElements = postItems ? postItems.map((postData) => {\n            return <Post data={postData.data} key={postData.data.id} getPostClickEvent={this.handleSinglePostDismiss} />;\n        }) : null;\n        const breakLabel = <span className=\"gap\">...</span>;\n        let paginationElement;\n        if (this.state.pageCount > 1) {\n            paginationElement = <ReactPaginate\n                previousLabel={'←'}\n                nextLabel={'→'}\n                breakLabel={breakLabel}\n                pageCount={this.state.pageCount}\n                onPageChange={this.handlePageClick}\n                forcePage={this.state.currentPage}\n                containerClassName={'pagination'}\n                previousLinkClassName={'previous-page'}\n                nextLinkClassName={'next-page'}\n                disabledClassName={'disabled'}\n                activeClassName={'active'}\n            />\n        }\n        return (\n            <Router>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                    {paginationElement}\n                    <List className={'posts-list'}>\n                        <CSSTransitionGroup\n                            transitionName=\"fade-out-dismiss\"\n                            transitionEnterTimeout={500}\n                            transitionLeaveTimeout={300}>\n                            {postsElements}\n                        </CSSTransitionGroup>\n                    </List>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Switch>\n                            <Route path=\"/:id\" children={ <PostDetail /> } />\n                        </Switch>\n                    </Grid>\n                </Grid>\n            </Router>\n        );\n    }\n}\n\nfunction PostDetail() {\n    const location = useLocation();\n    const { thumbnail, author, subreddit_id, url, title } = location.state;\n    let { id } = useParams();\n    const detailsData = {\n        thumbnail,\n        author,\n        subreddit_id,\n        url,\n        id,\n        title,\n    };\n  \n    return (\n        <React.Fragment>\n            <PostDeatils {...detailsData} />\n        </React.Fragment>\n    );\n  }\n\nconst mapStateToProps = state => ({\n    error: getPostsError(state),\n    posts: getPosts(state),\n    pending: getPostsPending(state),\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    updateSinglePost: updateSinglePostAction,\n    dismissSinglePost: dismissSinglePostAction,\n  }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PostsList);\n\n\n","import React from 'react';\nimport './index.css';\n\nfunction LoadingSpinner() {\n    return (\n        <div className=\"lds-roller\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport fetchPostsAction from './services/fetch-posts';\nimport dismissAllPostsAction from './services/dismiss-all-posts';\n\nimport { getPosts, getPostsPending, getPostsError } from './reducers/posts';\n\nimport './App.css';\n\nimport PostsList from './components/posts-list/posts-list';\nimport LoadingSpinner from './components/loading-spinner';\n\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          areAllPostsDismissed: false,\n      };\n\n      this.dismissAllPostsHandler = this.dismissAllPostsHandler.bind(this);\n      this.handleRefreshPage = this.handleRefreshPage.bind(this);\n    }\n    \n    componentDidMount() {\n        const { fetchPosts } = this.props;\n        fetchPosts();\n    }\n\n    dismissAllPostsHandler() {\n        const { dismissAllPosts } = this.props;\n        dismissAllPosts();\n        // Set new state property.\n        this.setState({\n            areAllPostsDismissed: true,\n        });\n    }\n    handleRefreshPage() {\n        window.location.replace('/');\n        window.location.reload();\n    }\n\n    render() {\n        const { error, posts, pending } = this.props;\n        const dismissAllPostsButton = <div className=\"dismiss-all\">\n             <Button variant=\"contained\" color=\"primary\" onClick={this.dismissAllPostsHandler}>\n                Dismiss all posts\n            </Button>\n        </div>;\n        const emptyPageMessage = <div className={'empty-page'}>\n            <h3>No posts to show here.</h3>\n            <p>\n                Please, refresh your browser or click <span className={'refresh-link'} onClick={this.handleRefreshPage}>here</span>.\n                <br />\n                Thank you!\n            </p>\n        </div>;\n        return (\n                <div className=\"app\">\n                    <AppBar>\n                      <Toolbar>\n                        <Typography variant=\"h6\" className={'title'}>\n                            Degivet Reddit's top 50\n                        </Typography>\n                      </Toolbar>\n                    </AppBar>\n                    <Container maxWidth={'xl'}>\n                        <div className=\"posts-list-wrapper\">\n                            { pending ? <LoadingSpinner /> : null }\n                            { error && <span className=\"error-message\">{error}</span> }\n\n                            { !this.state.areAllPostsDismissed && !pending ? dismissAllPostsButton : null }\n                            { this.state.areAllPostsDismissed ? emptyPageMessage : null }\n                            { posts.length > 1 ? <PostsList posts={ posts } /> : null }\n                        </div>\n                    </Container>\n                </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: getPostsError(state),\n    posts: getPosts(state),\n    pending: getPostsPending(state),\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchPosts: fetchPostsAction,\n  dismissAllPosts: dismissAllPostsAction,\n}, dispatch);\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Util functions.\n\n/**\n * @hotReloading\n * @param {*} path \n * @param {*} component\n * Enables hot reloading for development environment. \n */\nexport default function hotReloading(path, component) {\n    if (process.env.NODE_ENV !== 'production' && module.hot) {\n        module.hot.accept(path, component);\n    }\n}","const logger = store => next => action => {\n    console.group(action.type);\n    console.info('dispatching', action);\n    let result = next(action);\n    console.log('next state', store.getState());\n    console.groupEnd();\n    return result;\n};\n\nexport default logger;","import { combineReducers } from 'redux';\nimport postsReducers from './posts';\n\nexport default combineReducers({\n    postsReducers\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './configureStore';\nimport { Provider } from 'react-redux';\nimport hotReloading from './utils/hotReloading';\n\nconst store = configureStore();\n\n\n\nconst renderApp = () => ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nhotReloading('./components/App', renderApp);\nrenderApp();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport hotReloading from './utils/hotReloading';\n\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureAppStore(preloadedState) {\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: [loggerMiddleware, ...getDefaultMiddleware()],\n        preloadedState,\n        enhancers: []\n    });\n\n    // hot reloading\n    hotReloading('./reducers', () => store.replaceReducer(rootReducer));\n    \n    return store;\n}"],"sourceRoot":""}